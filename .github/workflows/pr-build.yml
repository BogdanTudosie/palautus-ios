name: iOS Pull Request
on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.swift'
      - '**.xcodeproj/**'
      - '**.plist'
      - '.github/workflows/**'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: List Available Runtimes and Create Simulator
        run: |
          # List available runtimes
          xcrun simctl list runtimes
          
          # Create a new simulator with iOS 16.2
          SIMULATOR_NAME="iPhone 14 Test Device"
          SIMULATOR_UDID=$(xcrun simctl create "${SIMULATOR_NAME}" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-16-2")
          echo "Created simulator: ${SIMULATOR_UDID}"
          
          # Boot the simulator
          xcrun simctl boot "${SIMULATOR_UDID}"
          
          # Set environment variable for later use
          echo "SIMULATOR_UDID=${SIMULATOR_UDID}" >> $GITHUB_ENV

      - name: Build and Test
        run: |
          xcodebuild clean test \
            -project palautus.xcodeproj \
            -scheme palautus \
            -destination "platform=iOS Simulator,id=${SIMULATOR_UDID}" \
            -enableCodeCoverage YES \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES \
            | xcpretty && exit ${PIPESTATUS[0]}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/
            fastlane/test_output/

  lint:
    name: SwiftLint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
        with:
          args: --strict

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'json'
        output: 'trivy-report.json'
        severity: 'CRITICAL,HIGH,MEDIUM'
        ignore-unfixed: true

    - name: Upload Trivy JSON Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-json-report
        path: trivy-report.json

    - name: Download Trivy HTML Template
      run: |
        curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
  
    - name: Run Trivy vulnerability scanner (HTML)
      run: |
        trivy fs --format template --template "html.tpl" --output trivy-report.html --severity CRITICAL,HIGH,MEDIUM .
  
    - name: Upload Trivy HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-html-report
        path: trivy-report.html