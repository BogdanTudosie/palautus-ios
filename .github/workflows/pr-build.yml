name: iOS Pull Request
on:
  pull_request:
    branches:
      - develop
      - feature-branch
      - main
    paths:
      - "**.swift"
      - "**.xcodeproj/**"
      - "**.plist"
      - ".github/workflows/**"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Download iOS 18.3 Platform
        run: |
          echo "Downloading iOS platform..."
          RETRIES=5
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i to download iOS 18.3 platform..."
            xcrun xcodebuild -downloadPlatform iOS && break
            echo "Download failed. Retrying in 10 seconds..."
            sleep 10
          done

          echo "Waiting for download to complete..."
          sleep 30

          echo "\nAvailable runtimes after download:"
          xcrun simctl list runtimes

          # Check if the specific simulator is available
          SIMULATOR_EXISTS=$(xcrun simctl list devices | grep 'iPhone 16' | grep 'iOS 18' || true)
          if [ -z "$SIMULATOR_EXISTS" ]; then
            echo "iPhone 16 simulator for iOS 18.x not found. Downloading it now with retries..."
            for i in $(seq 1 $RETRIES); do
              echo "Attempt $i to install the iOS 18.3 simulator..."
              xcrun simctl runtime install "iOS 18.3" && break
              echo "Simulator installation failed. Retrying in 10 seconds..."
              sleep 10
            done
          else
            echo "iPhone 16 simulator for iOS 18.x is already installed."
          fi

      - name: Debug - List available simulators
        run: xcrun simctl list devices

      - name: Use Existing iPhone 16 Simulator (iOS 18.x, any variant)
        run: |
          SIMULATOR_UDID=$(
            xcrun simctl list devices |
            awk '/iOS 18\./{flag=1;next}/^--/{flag=0}flag' |
            grep 'iPhone 16' |
            grep -v 'unavailable' |
            awk -F '[()]' '{print $2}' |
            head -n 1
          )
          if [ -z "$SIMULATOR_UDID" ]; then
            echo "No suitable iPhone 16 simulator found!"
            exit 1
          fi

          echo "Resetting the simulator state..."
          xcrun simctl shutdown "$SIMULATOR_UDID" || true
          xcrun simctl erase "$SIMULATOR_UDID"

          echo "Using simulator: $SIMULATOR_UDID"
          xcrun simctl boot "$SIMULATOR_UDID" || true

          # Increase retries and timeout
          for i in {1..30}; do
            echo "Checking simulator status (attempt $i)..."
            BOOTED=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep "Booted" || true)
            if [ -n "$BOOTED" ]; then
              echo "Simulator is booted!"
              xcrun simctl list devices
              break
            fi
            echo "Waiting for simulator to boot..."
            sleep 15
          done

          # Verify simulator is really ready
          if ! xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep -q "Booted"; then
            echo "Simulator failed to boot properly"
            exit 1
          fi

          echo "SIMULATOR_UDID=${SIMULATOR_UDID}" >> $GITHUB_ENV

      - name: Cache Build Data
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            Build/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      - name: Build and Test
        run: |
          # Pre-test validation
          echo "Verifying simulator status..."
          xcrun simctl list devices

          echo "Running tests..."
          xcodebuild test \
          -project palautus.xcodeproj \
          -scheme palautus \
          -destination "platform=iOS Simulator,id=${SIMULATOR_UDID}" \
          -sdk iphonesimulator \
          -enableCodeCoverage YES \
          -parallel-testing-enabled YES \
          -maximum-parallel-testing-workers 2 \
          -derivedDataPath Build/DerivedData \
          -configuration Debug \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          | tee xcodebuild.log \
          | xcpretty --color --simple

          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Tests failed. Full build log:"
            cat xcodebuild.log
            exit 1
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/
            fastlane/test_output/

  lint:
    name: SwiftLint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
        with:
          args: --strict

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "json"
          output: "trivy-report.json"
          severity: "CRITICAL,HIGH,MEDIUM"
          ignore-unfixed: true

      - name: Upload Trivy JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-report
          path: trivy-report.json

      - name: Download Trivy HTML Template
        run: |
          curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy vulnerability scanner (HTML)
        run: |
          trivy fs --format template --template "html.tpl" --output trivy-report.html --severity CRITICAL,HIGH,MEDIUM .

      - name: Upload Trivy HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-html-report
          path: trivy-report.html
