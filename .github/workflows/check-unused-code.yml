name: Check Unused Code

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  periphery:
    name: 🔍 Unused Code Check
    runs-on: macos-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Select Xcode
        run: |
          echo "Using Xcode 16.2..."
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version

      - name: 🔍 Find available iOS runtime
        id: find-runtime
        run: |
          echo "Looking for available iOS runtimes..."
          # Simplified jq query that properly handles the boolean
          RUNTIME_ID=$(xcrun simctl list -j runtimes | \
            jq -r '.runtimes[] | select(.platform=="iOS" and .isAvailable==true) | 
            select(.version | startswith("17.")) | .identifier' | head -n 1)

          if [[ -z "$RUNTIME_ID" ]]; then
            echo "⚠️ No iOS 17 runtime found, attempting download..."
            xcrun xcodebuild -downloadPlatform iOS

            # Check again after download with fixed query
            RUNTIME_ID=$(xcrun simctl list -j runtimes | \
              jq -r '.runtimes[] | select(.platform=="iOS" and .isAvailable==true) | 
              select(.version | startswith("17.")) | .identifier' | head -n 1)

            if [[ -z "$RUNTIME_ID" ]]; then
              echo "❌ Failed to find or download iOS 17 runtime"
              echo "Available runtimes:"
              xcrun simctl list runtimes
              exit 1
            fi
          fi

          echo "✅ Found runtime: $RUNTIME_ID"
          echo "RUNTIME_ID=$RUNTIME_ID" >> $GITHUB_ENV

      - name: 📱 Create and Boot Simulator
        id: boot-sim
        run: |
          SIMULATOR_NAME="iPhone 14"
          RUNTIME_ID=${{ env.RUNTIME_ID }}

          # Create simulator
          SIMULATOR_UDID=$(xcrun simctl create "$SIMULATOR_NAME" \
            "com.apple.CoreSimulator.SimDeviceType.${SIMULATOR_NAME}" \
            "$RUNTIME_ID")
          echo "📱 Created simulator: $SIMULATOR_UDID"

          # Boot simulator
          xcrun simctl boot "$SIMULATOR_UDID"

          # Wait for boot
          for i in {1..12}; do
            if xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep -q "Booted"; then
              echo "✅ Simulator booted successfully"
              break
            fi
            echo "⏳ Waiting for simulator to boot (attempt $i/12)..."
            sleep 5
          done

          echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/Library/Caches/periphery
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Brewfile') }}

      - name: 🔧 Install periphery
        run: |
          if ! command -v periphery &> /dev/null; then
            brew install periphery
          fi

      - name: 🏗️ Build for indexing
        run: |
          # Create required directories
          mkdir -p periphery-reports
          mkdir -p ~/Library/Caches/com.github.peripheryapp

          # Build with explicit DerivedData path
          xcodebuild clean build \
          -project palautus.xcodeproj \
          -scheme palautus \
          -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
          -sdk iphonesimulator \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          | xcpretty --color --simple

      - name: 🔎 Run periphery
        run: |
          periphery scan \
            --project palautus.xcodeproj \
            --schemes palautus \
            --format json \
            --index-store-path ~/Library/Developer/Xcode/DerivedData/palautus-*/Index/DataStore \
            --retain-objc-metadata \
            --skip-build \
            --quiet > periphery-reports/report.json || true # Continue even if unused code is found

      - name: 📤 Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: periphery-scan-results
          path: periphery-reports
          retention-days: 14
