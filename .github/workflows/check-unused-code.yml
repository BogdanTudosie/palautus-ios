name: Check Unused Code

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  periphery:
    name: 🔍 Unused Code Check
    runs-on: macos-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Select Xcode
        run: |
          echo "Using Xcode 16.2..."
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version

      - name: 🔍 Find available iOS runtime
        id: find-runtime
        run: |
          echo "Looking for available iOS runtimes..."
          # Simplified jq query that properly handles the boolean
          RUNTIME_ID=$(xcrun simctl list -j runtimes | \
            jq -r '.runtimes[] | select(.platform=="iOS" and .isAvailable==true) | 
            select(.version | startswith("17.")) | .identifier' | head -n 1)

          if [[ -z "$RUNTIME_ID" ]]; then
            echo "⚠️ No iOS 17 runtime found, attempting download..."
            xcrun xcodebuild -downloadPlatform iOS

            # Check again after download with fixed query
            RUNTIME_ID=$(xcrun simctl list -j runtimes | \
              jq -r '.runtimes[] | select(.platform=="iOS" and .isAvailable==true) | 
              select(.version | startswith("17.")) | .identifier' | head -n 1)

            if [[ -z "$RUNTIME_ID" ]]; then
              echo "❌ Failed to find or download iOS 17 runtime"
              echo "Available runtimes:"
              xcrun simctl list runtimes
              exit 1
            fi
          fi

          echo "✅ Found runtime: $RUNTIME_ID"
          echo "RUNTIME_ID=$RUNTIME_ID" >> $GITHUB_ENV

      - name: 📱 Create and Boot Simulator
        id: boot-sim
        run: |
          # List and find correct device type ID
          echo "Available device types:"
          xcrun simctl list devicetypes

          # Get exact device type ID for iPhone 14
          DEVICE_TYPE_ID=$(xcrun simctl list devicetypes | grep "iPhone 14" | head -n 1 | awk -F '[()]' '{print $2}')
          if [[ -z "$DEVICE_TYPE_ID" ]]; then
            echo "❌ iPhone 14 device type not found!"
            exit 1
          fi

          echo "Using device type: $DEVICE_TYPE_ID"

          # Create simulator with proper identifiers
          SIMULATOR_UDID=$(xcrun simctl create "Test_Device" "$DEVICE_TYPE_ID" "$RUNTIME_ID")
          echo "📱 Created simulator: $SIMULATOR_UDID"

          # Boot and verify
          xcrun simctl boot "$SIMULATOR_UDID"

          # Wait for boot with timeout
          for i in {1..12}; do
            if xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep -q "Booted"; then
              echo "✅ Simulator booted successfully"
              break
            fi
            echo "⏳ Waiting for simulator to boot (attempt $i/12)..."
            sleep 5
          done

          echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/Library/Caches/periphery
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Brewfile') }}

      - name: 🔧 Install periphery
        run: |
          if ! command -v periphery &> /dev/null; then
            brew install periphery
          fi

      - name: 🏗️ Build for indexing
        run: |
          # Create required directories
          mkdir -p periphery-reports
          mkdir -p ~/Library/Caches/com.github.peripheryapp

          # Set derived data path explicitly to find it later
          DERIVED_DATA_PATH="${HOME}/Library/Developer/Xcode/DerivedData/palautus"

          # Build with all code signing disabled
          xcodebuild clean build \
          -project palautus.xcodeproj \
          -scheme palautus \
          -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
          -sdk iphonesimulator \
          -derivedDataPath "$DERIVED_DATA_PATH" \
          -allowProvisioningUpdates \
          -configuration Debug \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY=- \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=YES \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          | xcpretty --color --simple

          # Export the derived data path for the next step
          echo "DERIVED_DATA_PATH=$DERIVED_DATA_PATH" >> $GITHUB_ENV

      - name: 🔎 Run periphery
        run: |
          # Ensure we're in the correct directory
          cd "$GITHUB_WORKSPACE"

          # Create output directory
          mkdir -p periphery-reports

          # Find the actual index store path with correct .noindex structure
          INDEX_STORE_PATH="$DERIVED_DATA_PATH/Index.noindex/DataStore"
          
          if [[ ! -d "$INDEX_STORE_PATH" ]]; then
            echo "❌ Index store path not found at $INDEX_STORE_PATH! Looking in DerivedData directory..."
            find "$DERIVED_DATA_PATH" -type d | grep -i index
            exit 1
          fi
          
          echo "✅ Found index store path: $INDEX_STORE_PATH"

          # Run periphery with correct options
          periphery scan \
            --project "${GITHUB_WORKSPACE}/palautus.xcodeproj" \
            --schemes palautus \
            --format json \
            --index-store-path "$INDEX_STORE_PATH" \
            --skip-build \
            --quiet > periphery-reports/report.json || true

          # Check if report was generated
          if [ -f periphery-reports/report.json ]; then
            echo "✅ Periphery scan completed"
            echo "📊 Results saved to periphery-reports/report.json"
            
            # Display summary of findings
            UNUSED_COUNT=$(jq -r '.results | length' periphery-reports/report.json)
            echo "📝 Found $UNUSED_COUNT unused code items"
          else
            echo "⚠️ Warning: No report file generated"
          fi

      - name: 📤 Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: periphery-scan-results
          path: periphery-reports
          retention-days: 14